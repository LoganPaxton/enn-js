import"fs";import{readFileSync,writeFileSync}from"fs";export class Brain{constructor(input_nodes,hidden_nodes,output_nodes){this.hidden_weights=[];this.output_weights=[];this.hidden_bias=[];this.output_bias=[];for(let i=0;i<hidden_nodes;i++){this.hidden_weights[i]=[];for(let j=0;j<input_nodes;j++){this.hidden_weights[i][j]=Math.random()*2-1}}for(let i=0;i<output_nodes;i++){this.output_weights[i]=[];for(let j=0;j<hidden_nodes;j++){this.output_weights[i][j]=Math.random()*2-1}}for(let i=0;i!=hidden_nodes;i++){let randfloat=Math.random()*2-1;this.hidden_bias[i]=randfloat}for(let i=0;i!=output_nodes;i++){let randfloat=Math.random()*2-1;this.output_bias[i]=randfloat}}sigmoid(x){return 1/(1+Math.exp(-x))}forwardHidden(inputs){let hidden_layer_outputs=[];for(let i=0;i<this.hidden_weights.length;i++){let sum=inputs.reduce(((acc,val,idx)=>acc+val*this.hidden_weights[i][idx]),this.hidden_bias[i]);hidden_layer_outputs.push(this.sigmoid(sum))}this.hidden_layer_outputs=hidden_layer_outputs}feedforward(inputs){this.forwardHidden(inputs);let output=[];for(let i=0;i<this.output_weights.length;i++){let sum=this.hidden_layer_outputs.reduce(((acc,val,idx)=>acc+val*this.output_weights[i][idx]),this.output_bias[i]);output.push(this.sigmoid(sum))}return output}calculate_output(){let output_layer_outputs=[];for(let i=0;i<this.output_weights.length;i++){let sum=this.hidden_layer_outputs.reduce(((acc,val,idx)=>acc+val*this.output_weights[i][idx]),this.output_bias[i]);output_layer_outputs.push(this.sigmoid(sum))}this.output_layer_outputs=output_layer_outputs}backpropagation(sample){let targets=sample.output;let output_error=[];let hidden_error=[];for(let i=0;i<this.output_layer_outputs.length;i++){output_error[i]=targets[i]-this.output_layer_outputs[i]}for(let j=0;j<this.hidden_weights.length;j++){let sum=0;for(let i=0;i<this.output_weights.length;i++){sum+=output_error[i]*this.output_weights[i][j]}hidden_error[j]=sum}let hidden_gradient=[];for(let i=0;i<hidden_error.length;i++){hidden_gradient[i]=hidden_error[i]*(this.hidden_layer_outputs[i]*(1-this.hidden_layer_outputs[i]))}let output_gradient=[];for(let i=0;i<output_error.length;i++){output_gradient[i]=output_error[i]*(this.output_layer_outputs[i]*(1-this.output_layer_outputs[i]))}for(let j=0;j<this.hidden_weights.length;j++){for(let k=0;k<this.hidden_weights[j].length;k++){let delta=this.learning_rate*hidden_gradient[j]*sample.input[k];this.hidden_weights[j][k]+=delta}}for(let i=0;i<this.output_weights.length;i++){for(let j=0;j<this.output_weights[i].length;j++){let delta=this.learning_rate*output_gradient[i]*this.hidden_layer_outputs[j];this.output_weights[i][j]+=delta}}}calculateLoss(targets,predictions){let sumSquaredErrors=0;for(let i=0;i<targets.length;i++){sumSquaredErrors+=Math.pow(targets[i]-predictions[i],2)}return sumSquaredErrors/targets.length}calculateAccuracy(targets,predictions,threshold=.5){let correctCount=0;for(let i=0;i<targets.length;i++){if(Math.abs(targets[i]-predictions[i])<threshold){correctCount++}}return correctCount/targets.length}train(lr,training_data,max_epoch){this.training_data=training_data;this.learning_rate=lr;let total_loss=0;let correct_predictions=0;let total_predictions=0;for(let epoch=0;epoch<max_epoch;epoch++){training_data.forEach((sample=>{this.forwardHidden(sample.input);this.calculate_output();this.backpropagation(sample);let loss=this.calculateLoss(sample.output,this.output_layer_outputs);total_loss+=loss;let accuracy=this.calculateAccuracy(sample.output,this.output_layer_outputs);correct_predictions+=accuracy;total_predictions++}));total_loss/=this.training_data.length;let average_accuracy=Math.round(correct_predictions/total_predictions*100);console.log(`Epoch ${epoch+1}: Loss = ${total_loss}, Accuracy = ${average_accuracy}%`)}}save_data(filepath="saved_data.json"){const data={output_layer_outputs:this.output_layer_outputs,output_bias:this.output_bias,hidden_weights:this.hidden_weights,hidden_bias:this.hidden_bias};const json=JSON.stringify(data,null,2);writeFileSync(filepath,json)}load_data(filename="saved_data.json"){const json=readFileSync(filename);const data=JSON.parse(json);this.output_layer_outputs=data.output_layer_outputs;this.output_bias=data.output_bias;this.hidden_weights=data.hidden_weights;this.hidden_bias=data.hidden_bias;console.log(`Loaded from ${filename}`)}}
